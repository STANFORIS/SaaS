Stanforis Digital Identity Protocol (SDIP)

Registration (IdentityRegisterRequest/Response)

Login (IdentityLoginRequest/Response)

Token Verification (IdentityVerifyRequest/Response)

Audit / Event messages (for Kafka or event bus integration)



✅ Key Points of This SDIP Proto

Registration

Full biometric + demographic + cryptography + login credentials.

Returns a unique digital identity + token for system access.

Login

Username/password + device ID

Returns auth token for downstream services.

Token Verification

Any microservice can call VerifyToken(token) to validate identity.

Ensures all services enforce SDIP at the root.

Event-Driven Architecture

IdentityRegisteredEvent, IdentityLoginEvent, IdentityVerificationEvent

Can be pushed to Kafka for logging, auditing, or triggering workflows.

Offline-Ready

Tokens and device IDs can be cached locally for temporary offline validation


📦auth
 ┣ 📂digital_identification
 ┃ ┣ 📂src
 ┃ ┃ ┣ 📂digital_identity
 ┃ ┃ ┃ ┣ 📂dto
 ┃ ┃ ┃ ┣ 📂kafka
 ┃ ┃ ┃ ┃ ┣ 📜kafka.consumer.ts
 ┃ ┃ ┃ ┃ ┗ 📜kafka.producer.ts
 ┃ ┃ ┃ ┣ 📜digital_identity.controller.ts
 ┃ ┃ ┃ ┣ 📜digital_identity.grpc.ts
 ┃ ┃ ┃ ┣ 📜digital_identity.module.ts
 ┃ ┃ ┃ ┗ 📜digital_identity.service.ts
 ┃ ┃ ┣ 📂proto
 ┃ ┃ ┃ ┗ 📜stanforis_digital_identity.proto
 ┃ ┃ ┣ 📜app.module.ts
 ┃ ┃ ┗ 📜main.ts
 ┃ ┣ 📜package.json
 ┃ ┣ 📜README.md
 ┃ ┗ 📜tsconfig.json
 ┗ 📜README









































1️⃣ Key Responsibilities of SDIP

From your description:

In-System Registration

Creates a nationally verifiable digital identity for the client.

Collects demographic info, contact info, biometrics, digital key, and system credentials.

Timestamped and auditable, with registrar/device metadata.

Authentication / Login

Verifies credentials and digital identity.

Issues tokens for accessing sector-based services.

Authorization / Access Control

Role-based access per sector microservice.

Fine-grained permissions for sensitive operations.

Audit & Traceability

Logs every transaction for accountability and transparency.

Offline Support

Identity validation must work even if the device is temporarily offline (local cache + sync).

Interoperability Layer

All service-to-service calls verify identity tokens before execution.

2️⃣ Modeling IdentityRegisterRequest (Proto)

You already have a very thorough request structure. A few points for clarity and optimization:

Example .proto Skeleton for SDIP
syntax = "proto3";

package stanforis.auth.digital_id;

import "google/protobuf/timestamp.proto";

enum Gender {
    UNKNOWN = 0;
    MALE = 1;
    FEMALE = 2;
    OTHER = 3;
}

enum MaritalStatus {
    SINGLE = 0;
    MARRIED = 1;
    DIVORCED = 2;
    WIDOWED = 3;
}

message IdentityRegisterRequest {
    // National ID
    string national_id = 1;
    string first_name = 2;
    string middle_name = 3;
    string last_name = 4;
    string date_of_birth = 5;
    Gender gender = 6;

    // Place of birth
    string nationality = 7;
    string province = 8;
    string district = 9;
    string sector = 10;
    string cell = 11;
    string village = 12;
    string isibo = 13;

    // Contact
    string phone = 14;
    string email = 15;
    string address = 16;

    // Biometrics
    bytes fingerprint_data = 17;
    bytes face_image_data = 18;
    bytes iris_scan_data = 19;

    // Cryptography
    bytes public_key = 20;

    // Marital & occupation
    MaritalStatus marital_status = 21;
    string occupation = 22;

    // Registration metadata
    string registration_source = 23;
    google.protobuf.Timestamp request_timestamp = 24;
    string registrar_id = 25;
    string registration_center_id = 26;
    string device_id = 27;

    // System login
    string system_unique_email_id = 28;
    string username = 29;
    string password = 30;
}


Notes / Improvements:

Using proto3 avoids optional/required conflicts.

Field names are snake_case, standard in protobuf.

Keep biometric data as bytes, ensures compact serialization.

Digital identity will include public key; private key is local to the client device.

3️⃣ Flow After Registration

Client submits IdentityRegisterRequest.

SDIP verifies the national ID (NIDA/NIN) and other info.

Biometrics and public key are securely stored.

SDIP issues:

Unique Digital Identity ID

JWT or similar token for access to microservices

Optional offline token for low-connectivity validation

The client can now:

Access system entry point

Subscribe to sector-specific services via microservices

Be authenticated in every system interaction automatically

4️⃣ Next Steps (Logical Backend Plan)

Create SDIP microservice (backend/auth/digital_identification)

Endpoints:

RegisterIdentity(IdentityRegisterRequest) → returns IdentityRegisterResponse with unique ID + tokens

Login(Username/Password) → returns auth token

VerifyToken(Token) → validates user for downstream service calls

Integrate database (SurrealDB + Firebase/Isar cache)

Connect to audit/event logs (Kafka topics for all registration events)

Define proto messages for responses and events

IdentityRegisterResponse

IdentityVerifiedEvent (for Kafka)

Error messages

Secure all microservices to validate SDIP tokens before any action.








message IdentityRegisterRequest
    // NIDA NIN 
        required  string national_id = 1;
        required  string first_name = 2;
        required  string middle_name = 3;
        required  string last_name = 4;
        required  string date_of_birth = 5;
        required  Gender gender = 6;

    
//    Orgin Place of Birth 
        required  string Nationality = 7;
        required  string Province = 8;
        required  string District = 9;
        required  string Sector = 10;
        required  string Cell = 11;
        required  string Village = 12;
        option    string Isibo = 13;



//    Contact Details
        required  string Phone = 14;
        required  string Email = 15;
        required  string Address = 16;

//    Biometric Data
        required  bytes FingerprintData = 17;
        required  bytes FaceImageData = 18;
        required  bytes IrisScanData = 19;
//    Digital Identity Public Key
        required  bytes PublicKey = 20;
//    Marital Status
        required  MaritalStatus MaritalStatus = 21;
//    Occupation
        required  string Occupation = 22;
//    Registration Metadata
        required  string RegistrationSource = 23;
        required  google.protobuf.Timestamp RequestTimestamp = 24;
        required  string RegistrarID = 25;
        required  string RegistrationCenterID = 26;
        required  string DeviceID = 27;

        // System Login Creds
        required  string System_Unique_EmailID = 28;
        required  string Username = 29;
        required  string Password = 30;
