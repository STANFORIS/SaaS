syntax = "proto3";

package rwanda.identity;

import "google/protobuf/timestamp.proto";

// ----------------------------
// Messages
// ----------------------------

message RegisterRequest {
  string national_id = 1;
  string first_name = 2;
  string middle_name = 3;
  string last_name = 4;
  string date_of_birth = 5;
  Gender gender = 6;
  string place_of_birth = 7;
  string nationality = 8;
  string phone = 9;
  string email = 10;

  string street = 11;
  string sector = 12;
  string cell = 13;
  string district = 14;
  string province = 15;

  bytes fingerprint_data = 16;
  bytes face_image_data = 17;
  bytes iris_scan_data = 18;

  bytes public_key = 19;
  MaritalStatus marital_status = 20;
  string occupation = 21;

  string registration_source = 22;
  google.protobuf.Timestamp request_timestamp = 23;
  string registrar_id = 24;
}

message RegisterResponse {
  RegistrationStatus status = 1;
  string message = 2;
  string national_id = 3;

  // Optional verification / authentication
  string verification_token = 4; // OTP or token for email/phone verification
  bytes certificate = 5;         // Digital certificate or signed key

  google.protobuf.Timestamp registration_timestamp = 6;
}

message VerificationRequest {
  string national_id = 1;
  string verification_token = 2; // Token received via email/phone
}

message VerificationResponse {
  bool verified = 1;
  string message = 2;
  google.protobuf.Timestamp verification_timestamp = 3;
}

// ----------------------------
// Enums
// ----------------------------

enum Gender {
  MALE = 0;
  FEMALE = 1;
  OTHER = 2;
}

enum MaritalStatus {
  SINGLE = 0;
  MARRIED = 1;
  DIVORCED = 2;
  WIDOWED = 3;
}

enum RegistrationStatus {
  SUCCESS = 0;       // Registration completed successfully
  FAILURE = 1;       // Error occurred during registration
  DUPLICATE = 2;     // National ID already exists
  INVALID = 3;       // Invalid input data
}

// ----------------------------
// Service
// ----------------------------

service NationalIdentityService {
  // Registers a new national identity
  rpc RegisterIdentity(RegisterRequest) returns (RegisterResponse);

  // Verifies registration via OTP/email token
  rpc VerifyIdentity(VerificationRequest) returns (VerificationResponse);
}
